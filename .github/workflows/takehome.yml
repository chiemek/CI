name: Build and Push Docker Image

on:
  push:
    branches:
      - main # Trigger the workflow on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger the workflow on pull requests targeting the main branch

jobs:
  dotnet-test:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner for the job

    strategy:
      matrix:
        dotnet-version: ["8.0.x"] # Define .NET versions to test (you can add more versions if needed)

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Check out the repository code so that it can be used in the workflow

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }} # Set up the .NET SDK version specified in the matrix

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages # Path to cache .NET packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/*.csproj') }} # Unique cache key based on OS and .csproj files hash
          restore-keys: |
            ${{ runner.os }}-dotnet-  # Fallback key for restoring cache if exact match is not found

      - name: Restore dependencies
        run: dotnet restore webapp/webapp.csproj # Restore .NET project dependencies

      - name: Build the application
        run: dotnet build webapp/webapp.csproj --configuration Release # Build the .NET application

      - name: Format code
        run: dotnet format webapp/webapp.csproj

      - name: Run tests
        run: dotnet test webapp/webapp.csproj --configuration Release # Run .NET unit tests

        # Setup sonar-scanner
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v8

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@v3.0.0
        env:
          GITHUB_TOKEN: ${{ secrets._GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: webapp
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.sources=.
            -Dsonar.verbose=true
            -X

  dotnet-security-check:
    needs: dotnet-test
    runs-on: ubuntu-latest # Use the latest Ubuntu runner for the job

    strategy:
      matrix:
        dotnet-version: ["8.0.x"] # Define .NET versions to test (you can add more versions if needed)

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Snyk CLI
        run: npm install -g snyk # Install the Snyk CLI globally using npm

      - name: Snyk Authenticate
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Test for Vulnerabilities
        run: snyk test --all-projects --severity-threshold=medium # Run Snyk security test on all projects

      - name: Snyk Code Test
        run: snyk code test --all-projects
        continue-on-error: true

  docker-build-and-push:
    needs: dotnet-security-check
    runs-on: ubuntu-latest
    permissions:
      contents: read # Allow read access to repository contents
      packages: write # Allow write access to packages (for Docker image uploads)
      security-events: write # Required for uploading SARIF files

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Publish the application
        run: dotnet publish webapp/webapp.csproj --configuration Release --output ./app # Publish the .NET application to the ./app directory

      - name: Build and push Docker image
        run: |
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/dockertakehome:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/dockertakehome:latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: "${{ secrets.DOCKER_HUB_USERNAME }}/dockertakehome:latest"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Install Snyk CLI
        uses: snyk/actions/setup@0.4.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Container monitor
        run: snyk container monitor ${{ secrets.DOCKER_HUB_USERNAME }}/dockertakehome:latest --file=Dockerfile -d
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk to check for vulnerabilities in the Docker image
        uses: snyk/actions/docker@master
        with:
          image: ${{ secrets.DOCKER_HUB_USERNAME }}/dockertakehome:latest
          args: --file=Dockerfile --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: false # Pipeline will fail if high-severity vulnerabilities are found

      - name: Clean up unused Docker images
        run: docker image prune -f # Clean up unused Docker images

  k8s-manifest-scan:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Snyk to check Kubernetes manifest file for issues
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: kubernetes/
          args: --severity-threshold=high
