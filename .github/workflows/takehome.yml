name: Build and Push Docker Image

on:
  push:
    branches:
      - main # Trigger the workflow on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger the workflow on pull requests targeting the main branch

permissions:
  contents: read # Allow read access to repository contents
  packages: write # Allow write access to packages (for Docker image uploads)

jobs:
  build:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner for the job

    strategy:
      matrix:
        dotnet-version: ["8.0.x"] # Define .NET versions to test (you can add more versions if needed)

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Check out the repository code so that it can be used in the workflow

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }} # Set up the .NET SDK version specified in the matrix

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages # Path to cache .NET packages
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/*.csproj') }} # Unique cache key based on OS and .csproj files hash
          restore-keys: |
            ${{ runner.os }}-dotnet-  # Fallback key for restoring cache if exact match is not found

      - name: Restore dependencies
        run: dotnet restore webapp/webapp.csproj # Restore .NET project dependencies

      - name: Build the application
        run: dotnet build webapp/webapp.csproj --configuration Release # Build the .NET application

      - name: Publish the application
        run: dotnet publish webapp/webapp.csproj --configuration Release --output ./app # Publish the .NET application to the ./app directory

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:latest . # Build the Docker image with the tag "latest"

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }} # Docker Hub username stored in GitHub Secrets
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} # Docker Hub access token stored in GitHub Secrets

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/dockertakehome:latest # Push the Docker image to Docker Hub

      - name: Clean up unused Docker images
        run: docker system prune -f # Optionally clean up unused Docker images to save space
